// These mixins allow us to use flexbox styling without having to add the extra lines with vendor prefixes in.
// More info (and more available values*) on MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins

// ===== Display Containers
// Flex
// Example use: @include flexbox;
@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
}

// Inline Flex
// Example use: @include inline-flex;
@mixin inline-flex {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

// ===== Flexbox Direction
// Available values: row, row-reverse, column, column-reverse
// Example use: @include flex-direction(row-reverse);
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -moz-box-direction: reverse;
        -webkit-box-orient: horizontal;
        -moz-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -moz-box-direction: normal;
        -webkit-box-orient: vertical;
        -moz-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -moz-box-direction: reverse;
        -webkit-box-orient: vertical;
        -moz-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -moz-box-direction: normal;
        -webkit-box-orient: horizontal;
        -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}

// ===== Flexbox Wrap
// Available values: nowrap (default), wrap, wrap-reverse
// Example use: @include flex-wrap(wrap);
@mixin flex-wrap($value: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

// ===== Flexbox Flow
// flex-flow is shorthand for flex-direction and flex-wrap
// Example use: @include flex-flow(column-reverse wrap-reverse);
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

// ===== Flexbox Order
// Value: integer (positive, negative, or 0 (default))
// Example use: @include order(3);
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -moz-box-ordinal-group: $int + 1;
    -ms-flex-order: $int;
    -webkit-order: $int;
    order: $int;
}

// ===== Flexbox Grow
// Value: positive integer (0 is the default)
// Example use: @include flex-grow(2);
@mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
    -moz-box-flex: $int;
    -ms-flex: $int;
    -webkit-flex-grow: $int;
    flex-grow: $int;
}

// ===== Flexbox Shrink
// Value: positive integer (0 is the default)
// Example use: @include flex-shrink(1);
@mixin flex-shrink($int: 0) {
    -ms-flex: $int;
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    flex-shrink: $int;
}

// ===== Flexbox Basis
// Available values: auto (default), fill, max-content, min-content, fit-content, content, <width> (e.g. 10px, 3em or 50%)
// Example use: @include flex-basis(fill);
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}

// ===== Flexbox Flex (shorthand)
// flex is shorthand for flex-grow, flex-shrink and flex-basis
// Example use: @include flex(2, 2, 10%);
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box: $fg-boxflex;
    -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

// ===== Flexbox Justify Content*
// Available values: center, start, end, flex-start (default), flex-end, left, right, normal, space-between, space-around, space-evenly, stretch
// Example use: @include justify-content(space-between);
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -moz-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -moz-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -moz-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;
    } @else {
        -webkit-box-pack: $value;
        -moz-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
}

// ===== Flexbox Align Items*
// Available values: normal, stretch (default), center, start, end, flex-start, flex-end, self-start, self-end
// Example use: @include align-items(center);
@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -moz-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -moz-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -moz-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    align-items: $value;
}

// ===== Flexbox Align Self*
// Available values: auto (default), normal, center, start, end, self-start, self-end, flex-start, flex-end
// Example use: @include align-self(flex-end);
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

// ===== Flexbox Align Content*
// Available values: normal, stretch (default), center, start, end, flex-start, flex-end, space-between, space-around, space-evenly
// Example use: @include align-content(flex-end);
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}
